## -*- mode:ulam -*-
#=t41615_test_compiler_positionofdatamemberconstantofandnonref
##
##  gen output: (+ interleaved asserts)
##        Unsigned Arg: 5
##        Unsigned Arg: 5
##        Unsigned Arg: 5
##        Unsigned Arg: 5 (no assert)
##        Unsigned Arg: 3
##        Unsigned Arg: 104
##        Unsigned Arg: 101
##        Unsigned Arg: 101
##
#!
Exit status: -11
Ue_T : System { :System<> Int test() {  ChainRule insert;  Unsigned posOfAtom = 5u;  self ( posOfAtom )print . self ( posOfAtom 5u cast == )assert . constant ChainRule cCR = ChainRule.constantof;  constant Unsigned cPosOfAtom = 5u;  self ( 5u )print . self ( true )assert . Unsigned posOfAtom2 = 5u;  self ( posOfAtom2 )print . self ( posOfAtom2 5u cast == )assert . self ( insert ( )atomPos . )print . Unsigned qbpos = 3u;  self ( qbpos )print . self ( qbpos 3u cast == )assert . Unsigned qbpos2 = 104u;  self ( qbpos2 )print . self ( qbpos2 104u cast == )assert . Unsigned qbpos3 = 101u;  self ( qbpos3 )print . self ( qbpos3 101u cast == )assert . Unsigned qbpos4 = 101u;  self ( qbpos4 )print . self ( qbpos4 qbpos3 == )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Un_ChainRule : QBase { Bool(5) sp(false);  Atom mCodonToInsert(Atom);  :QBase< Bool(3) m_qspace(false);  Int(8) m_qbase(0); > <NOMAIN> }
Uq_QBase { Bool(3) m_qspace(false);  Int(8) m_qbase(0);  <NOMAIN> }
##
##  First test of new of-operator: .positionof
## variations with class as a variable, a constant, inline constantof class, and implicit self,
##
#>T.ulam
 ulam 5;
element T : System{

  Int test(){
    ChainRule insert;

    Unsigned posOfAtom = insert.mCodonToInsert.positionof;
    print(posOfAtom);
    assert(posOfAtom==5u);

    constant ChainRule cCR = ChainRule.constantof;
    constant Unsigned cPosOfAtom = cCR.mCodonToInsert.positionof;
    print(cPosOfAtom);
    assert(cPosOfAtom==5u);

    Unsigned posOfAtom2 = ChainRule.constantof.mCodonToInsert.positionof;
    print(posOfAtom2);
    assert(posOfAtom2==5u);

    print(insert.atomPos()); //==5u

    //morevariations with a class variable, no refs:

    //BaseType and DM, short-circuits to relative position in baseclass
    Unsigned qbpos = insert.QBase.m_qbase.positionof;
    print(qbpos);
    assert(qbpos==3u);

    //absolute position of baseclass data member
    Unsigned qbpos2 = insert.m_qbase.positionof;
    print(qbpos2);
    assert(qbpos2==104u);

    //absolute position of baseclass
    Unsigned qbpos3 = insert.QBase.positionof;
    print(qbpos3);
    assert(qbpos3==101u);

    //absolute position of Super baseclass
    Unsigned qbpos4 = insert.Super.positionof;
    print(qbpos4);
    assert(qbpos4==qbpos3);

    return 0;
  }
}


#:ChainRule.ulam
  ulam 5;
transient ChainRule : QBase{
  Bool(5) sp;
  Atom mCodonToInsert;
  Unsigned atomPos(){
    return mCodonToInsert.positionof;
  }
}

#:QBase.ulam
  ulam 5;
quark QBase {
  Bool(3) m_qspace;
  Int(8) m_qbase;
}


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
