## -*- mode:ulam -*-
#=t41139_test_compiler_castatomreftoatom_issue
##
## gen output (4 asserts)
##
#!
Exit status: 1
Ue_Stretch { Bool b(true);  Bool c(true);  Bool d(true);  Bool e(true);  Int test() {  System s;  AUtil au;  Atom a = Stretch.instanceof cast;  Int type = au ( a cast )getTypeFunc .;  self b . type 1 cast == = s ( self b . )assert . Int typer = au ( a )getTypeFunc .;  self c . typer 1 cast == = s ( self c . )assert . Int typestretch = self ( self cast )getTypeFunc .;  self d . typestretch 2 cast == = s ( self d . )assert . Int typestretchr = self ( self cast )getTypeFunc .;  self e . typestretchr 2 cast == = s ( self e . )assert . type return } }
Uq_System { <NOMAIN> }
Uq_AUtil { <NOMAIN> }
##
## informed by user issue 9/14/2017
##
#>Stretch.ulam
  ulam 2;
element Stretch {
  Bool b,c,d,e;

  Int test(){
    System s;
    AUtil au;

    Atom a = Stretch.instanceof;

    //try with atom ref to atom
    Int type = au.getTypeFunc((Atom) a); //unnecessary cast
    b = (type == 1);
    s.assert(b);

    Int typer = au.getTypeFunc(a);
    c = (typer == 1);
    s.assert(c);

    //try with class ref to class
    Int typestretch = getTypeFunc((Stretch) self); //unnecessary cast
    d = (typestretch == 2);
    s.assert(d);

    Int typestretchr = getTypeFunc(self);
    e = (typestretchr == 2);
    s.assert(e);

    //try case that should fail (see error tests: t3629, t3660, t3661, t3665, t3785, t41086).
    // "must be referenceable" error message
    //Atom & bref = ew[0];
    //Atom & atref = (Atom) bref;
    return type;
  }

  Int getTypeFunc(Stretch s)
  {
    return 2;
  }

}

#:AUtil.ulam
  ulam 2;
quark AUtil {

  Int getTypeFunc(Atom a)
  {
    return 1;
  }

}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.
