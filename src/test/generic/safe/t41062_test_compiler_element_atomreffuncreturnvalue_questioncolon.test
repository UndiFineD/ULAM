## -*- mode:ulam -*-
#=t41062_test_compiler_element_atomreffuncreturnvalue_questioncolon
##
## gen output: 2 asserts
##
#!
Exit status: 0
Ue_Foo { Bool aisFoo(true);  Int test() {  System s;  Atom f3;  Atom& r = self ( f3 cast false )caller2 .;  s ( r Foo is ! )assert . Atom a = self ( f3 cast true )caller3 .;  self aisFoo . a Foo is = s ( self aisFoo . )assert . 0 cast return } }
Uq_System { <NOMAIN> }
##
## informed by t41033, Dave email 2/10/2017 and t41031; note:uses MFM::UlamRefMutable.
##
#>Foo.ulam
  ulam 3;
element Foo
{
  Bool aisFoo;

  Atom & func(Atom& arg1, Atom& arg2, Bool barg)
  {
    return barg ? arg1 : arg2;
  }

  Atom & caller2(Atom& a1, Bool barg)
  {
    Foo f2;
    Atom & r2 = f2.atomof;
    return func(r2, a1, barg);  // Safe or not?  Can't know til runtime.
  }

  Atom caller3(Atom& a1, Bool barg)
  {
    Foo f2;
    Atom & r2 = f2.atomof;
    return func(r2, a1, barg);  // Safe or not?  Can't know til runtime.
  }

  Int test() {
    System s;

    Atom f3;
    Atom & r = caller2(f3, false);
    s.assert(!(r is Foo));

    Atom a = caller3(f3, true);
    aisFoo = (a is Foo);
    s.assert(aisFoo);

    return 0;
  }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
