## -*- mode:ulam -*-
#=t41599_test_compiler_reftobaseclassdmposoffbyone_ish
##
##  gen code output: (2 asserts)
#!
Exit status: -11
Ue_R { Int test() {  System s;  DemoState ds;  PocketHC3& p = ds mPocket . cast;  { p mStatus . ds mPocket . mStatus . != cond s ( false )assert . if s ( true )assert . else } DemoState& dsp = ds cast;  PocketHC3& pp = dsp mPocket . cast;  { pp mStatus . dsp mPocket . mStatus . != cond s ( false )assert . if s ( true )assert . else } 0 cast return } }
Uq_System { <NOMAIN> }
Un_DemoState : SegmentState { Bool mGrowTemp( false);  typedef Unsigned(4) SegNo;  constant Unsigned(4) cMAX_SEG = 10u;  Unsigned(4) mSegNo(0);  :SegmentState< typedef Unsigned(6) SN;  typedef Unsigned(3) PocketPtr;  PocketHC3 mPocket( typedef Unsigned(6) SN;  Unsigned mCoordCount(0);  typedef Int(16) Bound;  Int(16) mBounds[4](0,0,0,0);  constant Unsigned cMINY = 0u;  constant Unsigned cMAXX = 1u;  constant Unsigned cMAXY = 2u;  constant Unsigned cMINX = 3u;  typedef Unsigned(2) Status;  constant Unsigned(2) cSTATUS_OK = 0u;  constant Unsigned(2) cSTATUS_EDGE = 1u;  constant Unsigned(2) cSTATUS_OPEN = 2u;  constant Unsigned(2) cSTATUS_BENT = 3u;  Unsigned(2) mStatus( 3u); );  Unsigned(6) mEWSNAvailable[2](0,0);  Unsigned(3) mPocketWithAvailable[2]( { 7u, 7u });  Unsigned(6) mEWSNMate[2](0,0);  Unsigned(3) mPocketWithMate[2]( { 7u, 7u }); > <NOMAIN> }
Un_PocketHC3 { typedef Unsigned(6) SN;  Unsigned mCoordCount(0);  typedef Int(16) Bound;  Int(16) mBounds[4](0,0,0,0);  constant Unsigned cMINY = 0u;  constant Unsigned cMAXX = 1u;  constant Unsigned cMAXY = 2u;  constant Unsigned cMINX = 3u;  typedef Unsigned(2) Status;  constant Unsigned(2) cSTATUS_OK = 0u;  constant Unsigned(2) cSTATUS_EDGE = 1u;  constant Unsigned(2) cSTATUS_OPEN = 2u;  constant Unsigned(2) cSTATUS_BENT = 3u;  Unsigned(2) mStatus( 3u);  <NOMAIN> }
Un_SegmentState { typedef Unsigned(6) SN;  typedef Unsigned(3) PocketPtr;  PocketHC3 mPocket( typedef Unsigned(6) SN;  Unsigned mCoordCount(0);  typedef Int(16) Bound;  Int(16) mBounds[4](0,0,0,0);  constant Unsigned cMINY = 0u;  constant Unsigned cMAXX = 1u;  constant Unsigned cMAXY = 2u;  constant Unsigned cMINX = 3u;  typedef Unsigned(2) Status;  constant Unsigned(2) cSTATUS_OK = 0u;  constant Unsigned(2) cSTATUS_EDGE = 1u;  constant Unsigned(2) cSTATUS_OPEN = 2u;  constant Unsigned(2) cSTATUS_BENT = 3u;  Unsigned(2) mStatus( 3u); );  Unsigned(6) mEWSNAvailable[2](0,0);  Unsigned(3) mPocketWithAvailable[2]( { 7u, 7u });  Unsigned(6) mEWSNMate[2](0,0);  Unsigned(3) mPocketWithMate[2]( { 7u, 7u });  <NOMAIN> }
Uq_Segment { typedef Unsigned(6) SN;  typedef Unsigned(3) PocketPtr;  constant Unsigned(3) cPP_SELF = 0u;  constant Unsigned(3) cPP_WEST = 1u;  constant Unsigned(3) cPP_NORTH = 2u;  constant Unsigned(3) cPP_SOUTH = 3u;  constant Unsigned(3) cPP_EAST = 4u;  constant Unsigned(3) cPP_RSRV1 = 5u;  constant Unsigned(3) cPP_RSRV2 = 6u;  constant Unsigned(3) cPP_NULL = 7u;  typedef Unsigned(1) BodyDir;  constant Unsigned(1) cBODY_UP = 0u;  constant Unsigned(1) cBODY_DOWN = 1u;  Unsigned(3) mPocketPtrs[2]( { 7u, 7u });  <NOMAIN> }
##
## informed by Dave's 7/1/22 ish-164513:
## ref to dm of baseclass has pos incorrectly calculated, disregarding dm bitsize of subclass.
## (see also t3541 funcall case)
##
#>R.ulam
  ulam 5;
element R {

  Int test(){
    System s;
    DemoState ds;
    PocketHC3 & p = ds.mPocket;

    if (p.mStatus != ds.mPocket.mStatus)
      s.assert(false); //THIS SHOULD NEVER FAIL
    else
      s.assert(true);

    //case: ref dsp
    DemoState & dsp = ds;
    PocketHC3 & pp = dsp.mPocket;

    if (pp.mStatus != dsp.mPocket.mStatus)
      s.assert(false); //THIS SHOULD NEVER FAIL
    else
      s.assert(true);

    return 0;
  }
}

#:DemoState.ulam
  ulam 5;
transient DemoState : SegmentState {
  Bool mGrowTemp = false;

  typedef Unsigned(4) SegNo;
  constant SegNo cMAX_SEG = 10u;
  SegNo mSegNo;
}

#:SegmentState.ulam
  ulam 5;
transient SegmentState {
  typedef Unsigned(6) SN;
  typedef Segment.PocketPtr PocketPtr;

  PocketHC3 mPocket;

  // availability data valid after findAvailable returns true
  SN mEWSNAvailable[2];
  PocketPtr mPocketWithAvailable[2] = { Segment.cPP_NULL, Segment.cPP_NULL };

  // mate data valid after findMate returns true
  SN mEWSNMate[2];
  PocketPtr mPocketWithMate[2] = { Segment.cPP_NULL, Segment.cPP_NULL };
}


#:Segment.ulam
  ulam 5;
quark Segment {
  typedef Unsigned(6) SN;

  typedef Unsigned(3) PocketPtr;
  constant PocketPtr cPP_SELF  = 0u;  //< Ptr center
  constant PocketPtr cPP_WEST  = 1u;  //< Ptr west
  constant PocketPtr cPP_NORTH = 2u;  //< Ptr north
  constant PocketPtr cPP_SOUTH = 3u;  //< Ptr south
  constant PocketPtr cPP_EAST  = 4u;  //< Ptr east
  constant PocketPtr cPP_RSRV1 = 5u;  //< Don't use
  constant PocketPtr cPP_RSRV2 = 6u;  //< Don't use
  constant PocketPtr cPP_NULL  = 7u;  //< Null pointer

  typedef Unsigned(1) BodyDir;
  constant BodyDir cBODY_UP = 0u;
  constant BodyDir cBODY_DOWN = 1u;
  PocketPtr mPocketPtrs[BodyDir.maxof+1u]  = { cPP_NULL, cPP_NULL }; // fwd[0] bck[1] 6 bits total

  //// Segment API
  virtual Bool wantMove(SegmentState & ss) { return false; }
  virtual Bool wantGrow(SegmentState & ss) { return false; }

}

#:PocketHC3.ulam
  ulam 5;
transient PocketHC3 {
  typedef Unsigned(6) SN;

  //  C2D mCoords[4]; // 0 --, 1 +-, 2 ++, 3 -+
  Unsigned mCoordCount;

  typedef Int(16) Bound;
  Bound mBounds[4];
  constant Unsigned cMINY = 0u;
  constant Unsigned cMAXX = 1u;
  constant Unsigned cMAXY = 2u;
  constant Unsigned cMINX = 3u;

  typedef Unsigned(2) Status;
  constant Status cSTATUS_OK =   0u;     //< Properly-bounded pocket found
  constant Status cSTATUS_EDGE = 1u;     //< No pocket: Pocket on axis
  constant Status cSTATUS_OPEN = 2u;     //< No pocket: At least one corner missing
  constant Status cSTATUS_BENT = 3u;     //< No pocket: Unaligned adjacent corners or unitted
  Status mStatus = cSTATUS_BENT;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.
