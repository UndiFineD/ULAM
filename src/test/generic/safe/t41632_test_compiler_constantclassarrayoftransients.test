## -*- mode:ulam -*-
#=t41632_test_compiler_constantclassarrayoftransients
##
## gen output: 3 asserts
##     Unsigned Arg: 99
##
#!
Exit status: 0
Ue_R { typedef Unsigned(10) Byte;  Unsigned(10) ri0(2u);  Unsigned(10) ri1(4u);  Unsigned(10) kc2(99u);  Unsigned(10) mykc2(99u);  Int test() {  System s;  KeyExprRep kr;  kr m_key . keyexpr_x13 0 [] = self ri0 . kr m_key . m_rightIndex . = s ( kr m_key . m_rightIndex . 2u cast == )assert . self ri1 . keyexpr_x13 1 [] m_rightIndex . = s ( keyexpr_x13 1 [] m_rightIndex . 4u cast == )assert . KeyExprNode mykeyexpr_x13[5] = keyexpr_x13;  self mykc2 . mykeyexpr_x13 2 [] m_keyCode . = self kc2 . keyexpr_x13 2 [] m_keyCode . = s ( mykeyexpr_x13 2 [] m_keyCode . cast )print . s ( mykeyexpr_x13 2 [] m_keyCode . keyexpr_x13 2 [] m_keyCode . == )assert . 0 cast return } }
Un_KeyExprNode { typedef Unsigned(10) Byte;  Unsigned(10) m_leftIndex(0);  Unsigned(10) m_rightIndex(0);  Unsigned(10) m_keyCode(0);  Unsigned(10) m_op(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
Un_KeyExprRep { KeyExprNode m_key( typedef Unsigned(10) Byte;  Unsigned(10) m_leftIndex(0);  Unsigned(10) m_rightIndex(0);  Unsigned(10) m_keyCode(0);  Unsigned(10) m_op(0); );  <NOMAIN> }
##
##   same as t41631, except for transients instead of quarks
##
#>R.ulam
  ulam 5;
use KeyExprNode;
local constant KeyExprNode keyexpr_x13[] = {
   { .m_leftIndex = 1, .m_rightIndex = 2, .m_keyCode = 0, .m_op = '|' }, // [0]
   { .m_leftIndex = 3, .m_rightIndex = 4, .m_keyCode = 0, .m_op = '&' }, // [1]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'c', .m_op = 0 }, // [2]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'a', .m_op = 0 }, // [3]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'b', .m_op = 0 }, // [4] , EXTRA COMMA at the end??? no difference
 };
element R {
  typedef KeyExprNode.Byte Byte; //for big quark!
  Byte ri0;
  Byte ri1;
  Byte kc2;
  Byte mykc2;

  Int test() {
    System s;
    KeyExprRep kr;
    kr.m_key = keyexpr_x13[0]; //displayed in eval output
    ri0 = kr.m_key.m_rightIndex;
    s.assert(kr.m_key.m_rightIndex==2u);

    ri1 = keyexpr_x13[1].m_rightIndex;
    s.assert(keyexpr_x13[1].m_rightIndex==4u); //reads constant class array item

    //read entire constant class array - UNEVALUABLE?
    KeyExprNode mykeyexpr_x13[5] = local.keyexpr_x13; // see t41552 for error without dot
    mykc2 = mykeyexpr_x13[2].m_keyCode;
    kc2 = local.keyexpr_x13[2].m_keyCode;
    s.print(mykeyexpr_x13[2].m_keyCode);
    s.assert(mykeyexpr_x13[2].m_keyCode==keyexpr_x13[2].m_keyCode); //reads constant class array item
    return 0;
  }


}

#:KeyExprRep.ulam
  ulam 3;
transient KeyExprRep {
  KeyExprNode m_key;
}

#:KeyExprNode.ulam
  ulam 3;
transient KeyExprNode {
  typedef Unsigned(10) Byte; //for big quark!
  Byte m_leftIndex;  // for [,|&~]
  Byte m_rightIndex; // for [,|&]
  Byte m_keyCode;    // [a-zA-Z.@_?] or 0
  Byte m_op;         // [,|&~] or 0
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.
