## -*- mode:ulam -*-
#=t41563_test_compiler_bitopsonbigbits
##
##  gen output: 2 asserts
##
#!
Exit status: -11
Ue_Anchor10 { System s();  Int test() {  QSegment(120u) x;  typedef Bits(120) MPayload;  SegPkt10 pkt[3];  pkt 1 [] mCN . 3u = pkt 1 [] mUpbound . true = x mMessageBuffer . mPayload . pkt 1 [] cast = pkt 2 [] x mMessageBuffer . mPayload . cast = self s . ( pkt 1 [] mCN . pkt 2 [] mCN . == )assert . self s . ( pkt 2 [] mUpbound . )assert . 0 cast return } }
Un_SegPkt10 { typedef Unsigned(3) CN;  constant Unsigned(3) cNO_OP = 0u;  constant Unsigned(3) cSET_LENGTH = 1u;  constant Unsigned(3) cSET_STRETCH = 2u;  constant Unsigned(3) cSET_ANGLE = 3u;  constant Unsigned(3) cSET_FLEX = 4u;  constant Unsigned(3) cGROW_HEAD = 5u;  constant Unsigned(3) cRSV6 = 6u;  constant Unsigned(3) cRSV7 = 7u;  Bool mUpbound(false);  Unsigned(3) mCN(0);  String mStr( "Hello World");  Atom mAtom(Atom);  <NOMAIN> }
Un_QSegment(Unsigned cMSG_BITS) : QSeg { typedef QIMsg(bits) QC_QIMsg;  QIMsg(bits) mMessageBuffer(notready);  :QSeg< typedef Unsigned(5) SegPtr;  typedef Unsigned(2) Type; > <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_QSeg { typedef Unsigned(5) SegPtr;  typedef Unsigned(2) Type;  <NOMAIN> }
Un_QIMsg(Unsigned bits) { typedef Bits(UNKNOWN) Payload;  typedef Unary(2) Direction;  constant Unary(2) cEMPTY = 0u;  constant Unary(2) cUP = 1u;  constant Unary(2) cDOWN = 3u;  Unary(2) mDirection(0);  Bits(UNKNOWN) mPayload(notready);  <NOMAIN> }
##
## informed by Dave 9/4/21
##
#>QE.ulam
  ulam 5;
element QE {
  Int test() {
    Q q;
    q.func();
    return 0;
  }
}

#:Q.ulam
  ulam 5;
transient Q {
  constant Unsigned cSIZE = 66u;
  constant Unsigned cHALF = cSIZE/2u;
  typedef Bits(cSIZE) CBits;
  CBits mBits;

  Void func() {
    SystemU3 du;
    mBits = 0u;
    CBits v;
    v = ((CBits) 1u)<<cHALF;
    mBits |= v;
    if (mBits != 0u)
      du.print("nonzero");
    else
      du.print("zero");
    mBits &= v;
    if (mBits != 0u)
      du.print("still nonzero");
    else
      du.print("still zero");
    mBits ^= v;
    if (mBits != 0u)
      du.print("now nonzero");
    else
      du.print("now zero");
  }
}

#:SystemU3.ulam
  ulam 3;
quark SystemU3 : System {
  Void print(String s) native;
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
