## -*- mode:ulam -*-
#=t41654_test_compiler_elementandquark_virtualinbaseclasscallsnonvirtualwithsamenameinsubclass
##
##  gen code output: (+ 1 asserts)
##	 Int(4) Arg: 0x4
##
#!
Exit status: 0
Ue_Foo : QW { Bool first(true);  Int(4) m_i(0);  :QW< :System<>> ^System<> Int test() {  Foo f;  QW& fqref = f cast;  self ( fqref )func . 0 cast return } }
Uq_QW : System { :System<> <NOMAIN> }
Uq_System { <NOMAIN> }
##
## April 2023 Dave renamed non-virtual func with different name so it would not
##          keep calling the virtual func; BUT, he possibly forgot the src.func inside as-cond.
##          Should/can culam detect this user error?
##
#>Foo.ulam
  ulam 3;
element Foo : QW {
  Bool first = true;
  Int(4) m_i;

  Int test() {
    Foo f;
    QW& fqref = f;
    func(fqref);
    return 0;
  }

  Void func(Foo & src)
  {
    print(src.m_i);
    assert(src.m_i == 4);
  }

}

#:QW.ulam
  ulam 3;
quark QW : System {

  virtual Void func(QW& src)
  {
    if(src as Foo)
    {
      src.m_i = 4;
      src.func(src); //don't forget the src.func !!
    }
    else
    {
      assert(false); //WRONG
    }
  }

}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
