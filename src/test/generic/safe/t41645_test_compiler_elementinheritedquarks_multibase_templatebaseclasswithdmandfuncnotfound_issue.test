## -*- mode:ulam -*-
#=t41645_test_compiler_elementinheritedquarks_multibase_templatebaseclasswithdmandfuncnotfound_issue
##
## gen output: 1 assert
##
#!
Exit status: 0
Ue_R { Int v(1);  Int test() {  System s;  A aele;  self v . aele ( )getValue . = s ( self v . 1 cast == )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Ue_A : TBond(true) { /* empty class block */ }
Uq_TBond(Bool cSIDE) { typedef TBond(cSIDE) Mate;  Int mValue( 1);  <NOMAIN> }
Ue_B : TBond(false) { /* empty class block */ }
##
## informed by Sergei fix 3/4/23; t41361 cannot recreate with its simplified test.
## nor with its more complicated version. what is missing?
## see also complex ish 8/14/2021 where SeedTestWorm called virtfunc on tw, and erronously found "pure".
##
## NOTEWORTHY: MatingBond typedef in Bond, is canonical example of stub-copies (uses)
## vary based on class arguments, eventhough location and argument strings are identical.
##
## Here, definition of B needed for A's Mate to work. (see error/t41647)
##
#>R.ulam
 ulam 5;
element R {
  Int v;
  Int test()
  {
    System s;
    A aele;
    v = aele.getValue();
    s.assert(v==1);

    return 0;
  }
}

#:TBond.ulam
 ulam 5;
quark TBond(Bool cSIDE) {
  typedef TBond(!cSIDE) Mate;
  Int mValue = 1;

  Int getValue() {
    Mate mate;
    return mValue;
  }
}

#:A.ulam
  ulam 5;
element A : TBond(true){ }

#:B.ulam
  ulam 5;
element B : TBond(false){ /* required for A's mate to work*/ }

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
