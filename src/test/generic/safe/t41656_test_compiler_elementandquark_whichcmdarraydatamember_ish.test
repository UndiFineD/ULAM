## -*- mode:ulam -*-
#=t41656_test_compiler_elementandquark_whichcmdarraydatamember_ish
##
##  gen code output: (+ 1 asserts)
##	 String(3) Arg: "cGF"
##
#!
Exit status: 0
Ue_R { Int test() {  MyElement e;  e ( )behave . 0 cast return } }
Ue_MyElement : SystemU3 { Bool m_b(false);  typedef Unsigned(2) Cmd;  constant Unsigned(2) cGF = 0u;  constant Unsigned(2) cTL = 1u;  constant Unsigned(2) cTR = 2u;  constant Unsigned(2) cEP = 3u;  Unsigned(2) mProgram[17](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);  :SystemU3<> ^System<> <NOMAIN> }
Uq_SystemU3 : System { :System<> <NOMAIN> }
Uq_System { <NOMAIN> }
##
## 20230511 Dave ish, assert hit in NanoArm with arrayitem which condition; workaround uses local var.
##
#>R.ulam
  ulam 5;
element R {
  Int test() {
    MyElement e;
    e.behave();
    return 0;
  }
}


#:MyElement.ulam
  ulam 5;
element MyElement : SystemU3 {
  Bool m_b;
  typedef Unsigned(2) Cmd;
  constant Cmd cGF = 0u; //< grow forward
  constant Cmd cTL = 1u; //< turn left without growing
  constant Cmd cTR = 2u; //< turn right without growing
  constant Cmd cEP = 3u; //< end of program
  Cmd mProgram[17];  // 17x2b == 34b

  Bool programDone() { return mProgram[0] == cEP; }

  Bool runProgram() {
    while (!programDone() ) {
      // workaround!!
      //Cmd pgm = mProgram[0];
      //which (pgm) {
      which ( mProgram[0] ) {
	case cTL: { print("cTL"); }
	case cTR: { print("cTR"); }
	case cGF: { print("cGF"); return true; }
      }
    }
    return false;
  }

  Void behave() {
    m_b = runProgram();
    assert(m_b);
  }
}

#:SystemU3.ulam
  ulam 3;
quark SystemU3 : System {
  Void print(String s) native;
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
