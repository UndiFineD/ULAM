## -*- mode:ulam -*-
#=t41658_test_compiler_constantclassarraywithdefaultitem_issue
##  gen output: (+ interleaved asserts)
##    Unsigned Arg: 1
##    Unsigned Arg: 2
##    Unsigned Arg: 5
##    Unsigned Arg: 6
##
#!
Exit status: 0
Ue_KeyExprRep { KeyExprNode m_key( Unsigned(8) m_leftIndex(1u);  Unsigned(8) m_rightIndex(2u);  Unsigned(8) m_keyCode(0u);  Unsigned(8) m_op(124u);  typedef Unsigned(8) Byte; );  KeyExprNode m_key2( Unsigned(8) m_leftIndex(5u);  Unsigned(8) m_rightIndex(6u);  Unsigned(8) m_keyCode(0u);  Unsigned(8) m_op(0u);  typedef Unsigned(8) Byte; );  Int test() {  System s;  self m_key . keyexpr_x13 1 [] = s ( self m_key . m_leftIndex . cast )print . s ( self m_key . m_leftIndex . 1u cast == )assert . s ( self m_key . m_rightIndex . cast )print . s ( self m_key . m_rightIndex . 2u cast == )assert . self m_key2 . keyexpr_x13 2 [] = s ( self m_key2 . m_leftIndex . cast )print . s ( self m_key2 . m_leftIndex . 5u cast == )assert . s ( self m_key2 . m_rightIndex . cast )print . s ( self m_key2 . m_rightIndex . 6u cast == )assert . 0 cast return } }
Uq_KeyExprNode { typedef Unsigned(8) Byte;  Unsigned(8) m_leftIndex( 5u);  Unsigned(8) m_rightIndex( 6u);  Unsigned(8) m_keyCode(0);  Unsigned(8) m_op(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## ish, informed by Dave 6/29/23: what if one item has only default values? what is the syntax?
##
#>KeyExprRep.ulam
  ulam 5;
local constant KeyExprNode keyexpr_x13[] = {
  { }, // [0] uses default values - can be a first item too
  { .m_leftIndex = 1, .m_rightIndex = 2, .m_keyCode = 0, .m_op = '|' }, // [1]
  { }, // [2] uses default values
  { .m_leftIndex = 7, .m_rightIndex = 8, .m_keyCode = 'c', .m_op = 0 }, // [3]
  { .m_leftIndex = 1, .m_rightIndex = 2, .m_keyCode = 'a', .m_op = 0 }, // [4]
  { .m_leftIndex = 3, .m_rightIndex = 4, .m_keyCode = 'b', .m_op = 0 }, // [5] , EXTRA COMMA at the end? no difference like c++
 };
element KeyExprRep {
  KeyExprNode m_key, m_key2;
  Int test() {
    System s;
    m_key = keyexpr_x13[1]; //displayed in eval output
    s.print(m_key.m_leftIndex);
    s.assert(m_key.m_leftIndex == 1u);
    s.print(m_key.m_rightIndex);
    s.assert(m_key.m_rightIndex == 2u);

    m_key2 = keyexpr_x13[2]; //displayed in eval output
    s.print(m_key2.m_leftIndex);
    s.assert(m_key2.m_leftIndex == 5u);
    s.print(m_key2.m_rightIndex);
    s.assert(m_key2.m_rightIndex == 6u);
    return 0;
  }
}

#:KeyExprNode.ulam
  ulam 3;
quark KeyExprNode {
  typedef Unsigned(8) Byte;
  Byte m_leftIndex = 5u;  // for [,|&~]
  Byte m_rightIndex = 6u; // for [,|&]
  Byte m_keyCode;    // [a-zA-Z.@_?] or 0
  Byte m_op;         // [,|&~] or 0
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
