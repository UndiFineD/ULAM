## -*- mode:ulam -*-
#=t3714_test_compiler_bigtransient
##
## gen output: (+ 2 asserts)
##  Int Arg: 551
##  Int Arg: 87
##
## UNEVALUABLE big transient Too
##
#!
Exit status: -11
Ue_Foo { Int ta(9);  Int test() {  System s;  Too t;  t ( 551u cast )set . self ta . t ( )get . = s ( self ta . )print . t sp . self ta . 551u cast == cast = s ( t sp . cast )assert . t ( )init . s ( t ( )get . )print . s ( t ( )get . 87 cast == )assert . t ( )restore . self ta . return } }
Un_Too { Bool(7) sp(false);  Int a( 87);  Foo f[5]( Int ta( 9); ), ( Int ta( 9); ), ( Int ta( 9); ), ( Int ta( 9); ), ( Int ta( 9); );  Bits bits(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## based on t3711, FIRST TRANSIENT TEST EVER in the history of the universe!!!
##  6/15/22 Dave found gcc ish, resetting big transient to default values (see also t3727 for small transient, t3675 for element, and t3686 for quark).
##  6/26/22 modified to also test big transient default restore() compiles (see also t3727)
##
#>Foo.ulam
  ulam 2;
use Too;
use System;
element Foo {
  Int ta = 9;
  Int test() {
    System s;
    Too t;
    t.set(t.sizeof);
    ta = t.get();
    s.print(ta);
    t.sp = (ta == t.sizeof);
    s.assert(t.sp);

    //reset to default (6/15/22 ish)
    t.init();
    s.print(t.get());
    s.assert(t.get() == 87);

    //reset to default (6/26/22 ish)
    t.restore();
    return ta;
  }
}

#:Too.ulam
  ulam 2;
transient Too {
  Bool(7) sp;
  Int a = 87;
  Foo f[5];
  Bits bits;
  Int get()
  {
    return a;
  }
  Void set(Int arg)
  {
    a = arg;
  }
  Void init()
  {
    self = Self.instanceof;
  }
  Void restore()
  {
    Self t;
    self = t;
  }
  //  Int test() { NO TESTS in TRANSIENTS
}

#:System.ulam
ulam 1;
quark System {Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
