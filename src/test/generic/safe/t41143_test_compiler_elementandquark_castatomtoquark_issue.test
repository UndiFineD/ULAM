## -*- mode:ulam -*-
#=t41143_test_compiler_elementandquark_castatomtoquark_issue
##
##  gen output: 1 assert
#!
Exit status: 3
Ue_A : QW { Bool c(true);  :QW< Int(3) m_i(3); > Int test() {  System s;  Int rtn = 0 cast;  self m_i . 3 = Atom a = self.atomof cast;  { a QW is cond { QW q = a cast;  rtn q m_i . cast = } if } self c . rtn 3 cast == = s ( self c . )assert . rtn return } }
Uq_QW { Int(3) m_i( 1);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by t3733;
## Dave thinks quark ref requirement is unreasonable. Sun Oct 15 20:07:56 2017
## ulam changed to allow explicit casts to non-ref quark from atom/ref.
##
#>A.ulam
  ulam 3;
element A : QW {
  Bool c;
  Int test(){
    System s;
    Int rtn = 0;
    m_i = 3;
    Atom a = self.atomof;
    if(a is QW)
    {
      //note: it wouldn't have failed before if either: ew[1] was in a variable, or the cast was a quark ref.
      QW q = (QW) a; //WHY DOES THIS FAIL?
      rtn = q.m_i;
    }
    c = (rtn == 3);
    s.assert(c);
    return rtn;
  }
}

#:QW.ulam
  ulam 2;
quark QW{
  Int(3) m_i = 1;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
