## -*- mode:ulam -*-
#=t41633_test_compiler_constantclassarrayoftransientstoobig_error
#!
./R.ulam:3:16: ERROR: Constant value expression for transient 'keyexpr_x13' is 80 bits; Currently, only constant transients <=71 bits can be evaluated.
./R.ulam:3:16: ERROR: Problem in NodeConstantDef for type: KeyExprNode(80)[5], used with symbol name 'keyexpr_x13', after folding attempt.
Unrecoverable Program Type Label FAILURE.
##
## see safe/t41632, constant array of transient items 71-bits are okay.
##
#>R.ulam
  ulam 5;
use KeyExprNode;
local constant KeyExprNode keyexpr_x13[] = {
   { .m_leftIndex = 1, .m_rightIndex = 2, .m_keyCode = 0, .m_op = '|' }, // [0]
   { .m_leftIndex = 3, .m_rightIndex = 4, .m_keyCode = 0, .m_op = '&' }, // [1]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'c', .m_op = 0 }, // [2]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'a', .m_op = 0 }, // [3]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'b', .m_op = 0 }, // [4] , EXTRA COMMA at the end??? no difference
 };
element R {
  Int test() {
    System s;
    KeyExprRep kr;
    kr.m_key = keyexpr_x13[0]; //displayed in eval output
    s.assert(kr.m_key.m_rightIndex==2u);

    s.assert(keyexpr_x13[1].m_rightIndex==4u); //reads constant class array item

    //read entire constant class array
    KeyExprNode mykeyexpr_x13[5] = local.keyexpr_x13; // see t41552 for error without dot
    s.print(mykeyexpr_x13[2].m_keyCode);
    s.assert(mykeyexpr_x13[2].m_keyCode==keyexpr_x13[2].m_keyCode); //reads constant class array item
    return 0;
  }


}

#:KeyExprRep.ulam
  ulam 3;
transient KeyExprRep {
  KeyExprNode m_key;
}

#:KeyExprNode.ulam
  ulam 3;
transient KeyExprNode {
  typedef Unsigned(20) Byte; // TOO BIG!!

  Byte m_leftIndex;  // for [,|&~]
  Byte m_rightIndex; // for [,|&]
  Byte m_keyCode;    // [a-zA-Z.@_?] or 0
  Byte m_op;         // [,|&~] or 0
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.
