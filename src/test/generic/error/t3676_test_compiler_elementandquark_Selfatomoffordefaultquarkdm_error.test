## -*- mode:ulam -*-
#=t3676_test_compiler_elementandquark_Selfatomoffordefaultquarkdm_error
#!
##      gen code output: 2 asserts
##
##        unevaluable without assuming atoms as elements
##
Exit status: -1
Ue_A { Bool b(true);  QW m_qw();  Int test() {  System s;  self b . true = Atom a = self m_qw . ( )func .;  { a A as cond { A& a;  self b . false = s ( false )assert . } if s ( true )assert . else } { a QW is cond { self b . false = s ( false )assert . } if s ( true )assert . else } 0 cast return } }
Uq_System { <NOMAIN> }
Uq_QW { <NOMAIN> }
##
## Dave requested a way to get default values for Self (within a quark);
## Self.instanceof (default) vs self.atomof (current stg)
##
#>A.ulam
  ulam 2;
use System;
use QW;
element A {
  Bool b;
  QW m_qw;
  Int test(){
    System s;
    b = true;
    Atom a = m_qw.func(); //data member

    if(a as Self)
    {
      b = false; //for eval
      s.assert(false); //wrong
    }
    else
      s.assert(true); //default is false

    //s.assert(a is QW); fails
    if(a is QW)
    {
      b = false;
      s.assert(false); //fails
    }
    else
      s.assert(true); //correct

    return 0;
  }
}

#:QW.ulam
  ulam 2;
quark QW {
  Atom func()
  {
    Atom a = self.instanceof; //NOT_AN_ELEMENT !!
    return a;
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.
