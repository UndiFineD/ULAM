## -*- mode:ulam -*-
#=t41617_test_compiler_positionofascondref_error
##
#!
./T.ulam:14:22: ERROR: PositionOf 'atref', type: Codon& is not supported.
./T.ulam:14:7: ERROR: Initial value expression for: bad, initialization is invalid.
Unrecoverable Program Type Label FAILURE.
##
##  informed by t41616; (see also error t41618)
##
#>T.ulam
 ulam 5;
element T : System{

  Int test(){
    GeneralSeed seed;
    ChainRule_INSERT insert;
    SegmentState ss;
    insert.tryToInsert(ss, (Codon &) seed);

    Atom & atref = insert.mCodonToInsert;

    if(atref as Codon)
    {
      Unsigned bad = atref.positionof;
      print(bad);
    }

    return 0;
  }

}


#:ChainRule.ulam
  ulam 5;
transient ChainRule {

  //// CHAINRULE API
  virtual Bool apply(SegmentState & ss) ; //< true if rule matched and applied and we're done

}

#:ChainRule_INSERT.ulam
  ulam 5;
transient ChainRule_INSERT : ChainRule {
  Bool(5) sp;
  EventWindow ew;
  Atom mCodonToInsert;

  //// ChainRule_INSERT SERVICES
  Bool tryToInsert(SegmentState & p, Codon & codon) {
    mCodonToInsert = codon.atomof;
    return apply(p);
  }

  @Override
  virtual Bool apply(SegmentState & ss) {
    if (mCodonToInsert as Codon) {
      ew[1] = mCodonToInsert.atomof; //<---hits assert
      return true;
    }
    return false;
  }
}


#:SegmentState.ulam
  ulam 5;
transient SegmentState
{
  // inaccess data valid after findMate returns UNSURE
  Unsigned mInaccessibleInMateDir[3];
}

#:Codon.ulam
  ulam 5;
quark Codon {
  Bool sb;
}

#:GeneralSeed.ulam
  ulam 5;
element GeneralSeed : Codon {
  Bool(3) sb3;
}

#:EventWindow.ulam
  ulam 3;
quark EventWindow{
  Atom& aref(Int index) native;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
